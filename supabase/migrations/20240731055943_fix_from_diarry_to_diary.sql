drop trigger if exists "check_mood_limit_trigger" on "public"."diarry_entries_moods";

drop policy "Enable delete for authenticated users only" on "public"."diarry_entries_moods";

drop policy "Enable insert for authenticated users only" on "public"."diarry_entries_moods";

drop policy "Enable read access authenticated users" on "public"."diarry_entries_moods";

revoke delete on table "public"."diarry_entries_moods" from "anon";

revoke insert on table "public"."diarry_entries_moods" from "anon";

revoke references on table "public"."diarry_entries_moods" from "anon";

revoke select on table "public"."diarry_entries_moods" from "anon";

revoke trigger on table "public"."diarry_entries_moods" from "anon";

revoke truncate on table "public"."diarry_entries_moods" from "anon";

revoke update on table "public"."diarry_entries_moods" from "anon";

revoke delete on table "public"."diarry_entries_moods" from "authenticated";

revoke insert on table "public"."diarry_entries_moods" from "authenticated";

revoke references on table "public"."diarry_entries_moods" from "authenticated";

revoke select on table "public"."diarry_entries_moods" from "authenticated";

revoke trigger on table "public"."diarry_entries_moods" from "authenticated";

revoke truncate on table "public"."diarry_entries_moods" from "authenticated";

revoke update on table "public"."diarry_entries_moods" from "authenticated";

revoke delete on table "public"."diarry_entries_moods" from "service_role";

revoke insert on table "public"."diarry_entries_moods" from "service_role";

revoke references on table "public"."diarry_entries_moods" from "service_role";

revoke select on table "public"."diarry_entries_moods" from "service_role";

revoke trigger on table "public"."diarry_entries_moods" from "service_role";

revoke truncate on table "public"."diarry_entries_moods" from "service_role";

revoke update on table "public"."diarry_entries_moods" from "service_role";

alter table "public"."diarry_entries_moods" drop constraint "diarry_entries_moods_diary_entry_id_fkey";

alter table "public"."diarry_entries_moods" drop constraint "diarry_entries_moods_mood_id_fkey";

alter table "public"."diarry_entries_moods" drop constraint "unique_diary_entry_mood";

alter table "public"."diarry_entries_moods" drop constraint "diarry_entries_moods_pkey";

drop index if exists "public"."diarry_entries_moods_pkey";

drop index if exists "public"."unique_diary_entry_mood";

drop table "public"."diarry_entries_moods";

create table "public"."diary_entries_moods" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "diary_entry_id" bigint not null,
    "mood_id" bigint not null
);


alter table "public"."diary_entries_moods" enable row level security;

CREATE UNIQUE INDEX diarry_entries_moods_pkey ON public.diary_entries_moods USING btree (id);

CREATE UNIQUE INDEX unique_diary_entry_mood ON public.diary_entries_moods USING btree (diary_entry_id, mood_id);

alter table "public"."diary_entries_moods" add constraint "diarry_entries_moods_pkey" PRIMARY KEY using index "diarry_entries_moods_pkey";

alter table "public"."diary_entries_moods" add constraint "diarry_entries_moods_diary_entry_id_fkey" FOREIGN KEY (diary_entry_id) REFERENCES diary_entries(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_moods" validate constraint "diarry_entries_moods_diary_entry_id_fkey";

alter table "public"."diary_entries_moods" add constraint "diarry_entries_moods_mood_id_fkey" FOREIGN KEY (mood_id) REFERENCES moods(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_moods" validate constraint "diarry_entries_moods_mood_id_fkey";

alter table "public"."diary_entries_moods" add constraint "unique_diary_entry_mood" UNIQUE using index "unique_diary_entry_mood";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_mood_limit()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  IF (SELECT COUNT(*) FROM diary_entries_moods WHERE diary_entry_id = NEW.diary_entry_id) >=5 THEN RAISE EXCEPTION 'A diary entry can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$function$
;

grant delete on table "public"."diary_entries_moods" to "anon";

grant insert on table "public"."diary_entries_moods" to "anon";

grant references on table "public"."diary_entries_moods" to "anon";

grant select on table "public"."diary_entries_moods" to "anon";

grant trigger on table "public"."diary_entries_moods" to "anon";

grant truncate on table "public"."diary_entries_moods" to "anon";

grant update on table "public"."diary_entries_moods" to "anon";

grant delete on table "public"."diary_entries_moods" to "authenticated";

grant insert on table "public"."diary_entries_moods" to "authenticated";

grant references on table "public"."diary_entries_moods" to "authenticated";

grant select on table "public"."diary_entries_moods" to "authenticated";

grant trigger on table "public"."diary_entries_moods" to "authenticated";

grant truncate on table "public"."diary_entries_moods" to "authenticated";

grant update on table "public"."diary_entries_moods" to "authenticated";

grant delete on table "public"."diary_entries_moods" to "service_role";

grant insert on table "public"."diary_entries_moods" to "service_role";

grant references on table "public"."diary_entries_moods" to "service_role";

grant select on table "public"."diary_entries_moods" to "service_role";

grant trigger on table "public"."diary_entries_moods" to "service_role";

grant truncate on table "public"."diary_entries_moods" to "service_role";

grant update on table "public"."diary_entries_moods" to "service_role";

create policy "Enable delete for authenticated users only"
on "public"."diary_entries_moods"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."diary_entries_moods"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access authenticated users"
on "public"."diary_entries_moods"
as permissive
for select
to authenticated
using (true);


CREATE TRIGGER check_mood_limit_trigger BEFORE INSERT ON public.diary_entries_moods FOR EACH ROW EXECUTE FUNCTION check_mood_limit();



