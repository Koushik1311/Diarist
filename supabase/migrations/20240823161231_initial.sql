create type "public"."lifetime" as enum ('none', 'basic', 'premium', 'elite');

create table "public"."diary_entries" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "title" character varying,
    "content" text,
    "user_id" uuid not null
);


alter table "public"."diary_entries" enable row level security;

create table "public"."diary_entries_moods" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "diary_entry_id" uuid,
    "mood_id" bigint
);


alter table "public"."diary_entries_moods" enable row level security;

create table "public"."moods" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."moods" enable row level security;

create table "public"."private_memory_vault" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "title" character varying,
    "content" text,
    "encrypted_key" text,
    "user_id" uuid
);


alter table "public"."private_memory_vault" enable row level security;

create table "public"."subscriptions" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "lifetime" lifetime not null default 'none'::lifetime,
    "daily_entry_limit" smallint not null default '0'::smallint,
    "vault_entry_limit" smallint not null default '0'::smallint,
    "user_id" uuid not null,
    "entries" integer not null default 0
);


alter table "public"."subscriptions" enable row level security;

create table "public"."time_capsules" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "unlock_date" timestamp with time zone,
    "title" character varying,
    "content" text,
    "user_id" uuid not null
);


alter table "public"."time_capsules" enable row level security;

create table "public"."time_capsules_moods" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "time_capsule_id" uuid,
    "mood_id" bigint
);


alter table "public"."time_capsules_moods" enable row level security;

CREATE UNIQUE INDEX diary_entries_moods_pkey ON public.diary_entries_moods USING btree (id);

CREATE UNIQUE INDEX diary_entries_pkey ON public.diary_entries USING btree (id);

CREATE UNIQUE INDEX moods_name_key ON public.moods USING btree (name);

CREATE UNIQUE INDEX moods_pkey ON public.moods USING btree (id);

CREATE UNIQUE INDEX private_memory_vault_pkey ON public.private_memory_vault USING btree (id);

CREATE UNIQUE INDEX subscriptions_pkey ON public.subscriptions USING btree (id);

CREATE UNIQUE INDEX subscriptions_user_id_key ON public.subscriptions USING btree (user_id);

CREATE UNIQUE INDEX time_capsules_moods_pkey ON public.time_capsules_moods USING btree (id);

CREATE UNIQUE INDEX time_capsules_pkey ON public.time_capsules USING btree (id);

alter table "public"."diary_entries" add constraint "diary_entries_pkey" PRIMARY KEY using index "diary_entries_pkey";

alter table "public"."diary_entries_moods" add constraint "diary_entries_moods_pkey" PRIMARY KEY using index "diary_entries_moods_pkey";

alter table "public"."moods" add constraint "moods_pkey" PRIMARY KEY using index "moods_pkey";

alter table "public"."private_memory_vault" add constraint "private_memory_vault_pkey" PRIMARY KEY using index "private_memory_vault_pkey";

alter table "public"."subscriptions" add constraint "subscriptions_pkey" PRIMARY KEY using index "subscriptions_pkey";

alter table "public"."time_capsules" add constraint "time_capsules_pkey" PRIMARY KEY using index "time_capsules_pkey";

alter table "public"."time_capsules_moods" add constraint "time_capsules_moods_pkey" PRIMARY KEY using index "time_capsules_moods_pkey";

alter table "public"."diary_entries" add constraint "diary_entries_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries" validate constraint "diary_entries_user_id_fkey";

alter table "public"."diary_entries_moods" add constraint "diary_entries_moods_diary_entry_id_fkey" FOREIGN KEY (diary_entry_id) REFERENCES diary_entries(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_moods" validate constraint "diary_entries_moods_diary_entry_id_fkey";

alter table "public"."diary_entries_moods" add constraint "diary_entries_moods_mood_id_fkey" FOREIGN KEY (mood_id) REFERENCES moods(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_moods" validate constraint "diary_entries_moods_mood_id_fkey";

alter table "public"."moods" add constraint "moods_name_key" UNIQUE using index "moods_name_key";

alter table "public"."private_memory_vault" add constraint "private_memory_vault_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."private_memory_vault" validate constraint "private_memory_vault_user_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_user_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_user_id_key" UNIQUE using index "subscriptions_user_id_key";

alter table "public"."time_capsules" add constraint "time_capsules_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."time_capsules" validate constraint "time_capsules_user_id_fkey";

alter table "public"."time_capsules_moods" add constraint "time_capsules_moods_mood_id_fkey" FOREIGN KEY (mood_id) REFERENCES moods(id) ON DELETE CASCADE not valid;

alter table "public"."time_capsules_moods" validate constraint "time_capsules_moods_mood_id_fkey";

alter table "public"."time_capsules_moods" add constraint "time_capsules_moods_time_capsule_id_fkey" FOREIGN KEY (time_capsule_id) REFERENCES time_capsules(id) ON DELETE CASCADE not valid;

alter table "public"."time_capsules_moods" validate constraint "time_capsules_moods_time_capsule_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_mood_limit_for_normal_entry()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  IF (SELECT COUNT(*) FROM diary_entries_moods WHERE diary_entry_id = NEW.diary_entry_id) >=5 THEN RAISE EXCEPTION 'A diary entry can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.check_mood_limit_for_time_capsule()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  IF (SELECT COUNT(*) FROM time_capsules_moods WHERE time_capsule_id = NEW.time_capsule_id) >=5 THEN RAISE EXCEPTION 'A time capsule can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$function$
;

grant delete on table "public"."diary_entries" to "anon";

grant insert on table "public"."diary_entries" to "anon";

grant references on table "public"."diary_entries" to "anon";

grant select on table "public"."diary_entries" to "anon";

grant trigger on table "public"."diary_entries" to "anon";

grant truncate on table "public"."diary_entries" to "anon";

grant update on table "public"."diary_entries" to "anon";

grant delete on table "public"."diary_entries" to "authenticated";

grant insert on table "public"."diary_entries" to "authenticated";

grant references on table "public"."diary_entries" to "authenticated";

grant select on table "public"."diary_entries" to "authenticated";

grant trigger on table "public"."diary_entries" to "authenticated";

grant truncate on table "public"."diary_entries" to "authenticated";

grant update on table "public"."diary_entries" to "authenticated";

grant delete on table "public"."diary_entries" to "service_role";

grant insert on table "public"."diary_entries" to "service_role";

grant references on table "public"."diary_entries" to "service_role";

grant select on table "public"."diary_entries" to "service_role";

grant trigger on table "public"."diary_entries" to "service_role";

grant truncate on table "public"."diary_entries" to "service_role";

grant update on table "public"."diary_entries" to "service_role";

grant delete on table "public"."diary_entries_moods" to "anon";

grant insert on table "public"."diary_entries_moods" to "anon";

grant references on table "public"."diary_entries_moods" to "anon";

grant select on table "public"."diary_entries_moods" to "anon";

grant trigger on table "public"."diary_entries_moods" to "anon";

grant truncate on table "public"."diary_entries_moods" to "anon";

grant update on table "public"."diary_entries_moods" to "anon";

grant delete on table "public"."diary_entries_moods" to "authenticated";

grant insert on table "public"."diary_entries_moods" to "authenticated";

grant references on table "public"."diary_entries_moods" to "authenticated";

grant select on table "public"."diary_entries_moods" to "authenticated";

grant trigger on table "public"."diary_entries_moods" to "authenticated";

grant truncate on table "public"."diary_entries_moods" to "authenticated";

grant update on table "public"."diary_entries_moods" to "authenticated";

grant delete on table "public"."diary_entries_moods" to "service_role";

grant insert on table "public"."diary_entries_moods" to "service_role";

grant references on table "public"."diary_entries_moods" to "service_role";

grant select on table "public"."diary_entries_moods" to "service_role";

grant trigger on table "public"."diary_entries_moods" to "service_role";

grant truncate on table "public"."diary_entries_moods" to "service_role";

grant update on table "public"."diary_entries_moods" to "service_role";

grant delete on table "public"."moods" to "anon";

grant insert on table "public"."moods" to "anon";

grant references on table "public"."moods" to "anon";

grant select on table "public"."moods" to "anon";

grant trigger on table "public"."moods" to "anon";

grant truncate on table "public"."moods" to "anon";

grant update on table "public"."moods" to "anon";

grant delete on table "public"."moods" to "authenticated";

grant insert on table "public"."moods" to "authenticated";

grant references on table "public"."moods" to "authenticated";

grant select on table "public"."moods" to "authenticated";

grant trigger on table "public"."moods" to "authenticated";

grant truncate on table "public"."moods" to "authenticated";

grant update on table "public"."moods" to "authenticated";

grant delete on table "public"."moods" to "service_role";

grant insert on table "public"."moods" to "service_role";

grant references on table "public"."moods" to "service_role";

grant select on table "public"."moods" to "service_role";

grant trigger on table "public"."moods" to "service_role";

grant truncate on table "public"."moods" to "service_role";

grant update on table "public"."moods" to "service_role";

grant delete on table "public"."private_memory_vault" to "anon";

grant insert on table "public"."private_memory_vault" to "anon";

grant references on table "public"."private_memory_vault" to "anon";

grant select on table "public"."private_memory_vault" to "anon";

grant trigger on table "public"."private_memory_vault" to "anon";

grant truncate on table "public"."private_memory_vault" to "anon";

grant update on table "public"."private_memory_vault" to "anon";

grant delete on table "public"."private_memory_vault" to "authenticated";

grant insert on table "public"."private_memory_vault" to "authenticated";

grant references on table "public"."private_memory_vault" to "authenticated";

grant select on table "public"."private_memory_vault" to "authenticated";

grant trigger on table "public"."private_memory_vault" to "authenticated";

grant truncate on table "public"."private_memory_vault" to "authenticated";

grant update on table "public"."private_memory_vault" to "authenticated";

grant delete on table "public"."private_memory_vault" to "service_role";

grant insert on table "public"."private_memory_vault" to "service_role";

grant references on table "public"."private_memory_vault" to "service_role";

grant select on table "public"."private_memory_vault" to "service_role";

grant trigger on table "public"."private_memory_vault" to "service_role";

grant truncate on table "public"."private_memory_vault" to "service_role";

grant update on table "public"."private_memory_vault" to "service_role";

grant delete on table "public"."subscriptions" to "anon";

grant insert on table "public"."subscriptions" to "anon";

grant references on table "public"."subscriptions" to "anon";

grant select on table "public"."subscriptions" to "anon";

grant trigger on table "public"."subscriptions" to "anon";

grant truncate on table "public"."subscriptions" to "anon";

grant update on table "public"."subscriptions" to "anon";

grant delete on table "public"."subscriptions" to "authenticated";

grant insert on table "public"."subscriptions" to "authenticated";

grant references on table "public"."subscriptions" to "authenticated";

grant select on table "public"."subscriptions" to "authenticated";

grant trigger on table "public"."subscriptions" to "authenticated";

grant truncate on table "public"."subscriptions" to "authenticated";

grant update on table "public"."subscriptions" to "authenticated";

grant delete on table "public"."subscriptions" to "service_role";

grant insert on table "public"."subscriptions" to "service_role";

grant references on table "public"."subscriptions" to "service_role";

grant select on table "public"."subscriptions" to "service_role";

grant trigger on table "public"."subscriptions" to "service_role";

grant truncate on table "public"."subscriptions" to "service_role";

grant update on table "public"."subscriptions" to "service_role";

grant delete on table "public"."time_capsules" to "anon";

grant insert on table "public"."time_capsules" to "anon";

grant references on table "public"."time_capsules" to "anon";

grant select on table "public"."time_capsules" to "anon";

grant trigger on table "public"."time_capsules" to "anon";

grant truncate on table "public"."time_capsules" to "anon";

grant update on table "public"."time_capsules" to "anon";

grant delete on table "public"."time_capsules" to "authenticated";

grant insert on table "public"."time_capsules" to "authenticated";

grant references on table "public"."time_capsules" to "authenticated";

grant select on table "public"."time_capsules" to "authenticated";

grant trigger on table "public"."time_capsules" to "authenticated";

grant truncate on table "public"."time_capsules" to "authenticated";

grant update on table "public"."time_capsules" to "authenticated";

grant delete on table "public"."time_capsules" to "service_role";

grant insert on table "public"."time_capsules" to "service_role";

grant references on table "public"."time_capsules" to "service_role";

grant select on table "public"."time_capsules" to "service_role";

grant trigger on table "public"."time_capsules" to "service_role";

grant truncate on table "public"."time_capsules" to "service_role";

grant update on table "public"."time_capsules" to "service_role";

grant delete on table "public"."time_capsules_moods" to "anon";

grant insert on table "public"."time_capsules_moods" to "anon";

grant references on table "public"."time_capsules_moods" to "anon";

grant select on table "public"."time_capsules_moods" to "anon";

grant trigger on table "public"."time_capsules_moods" to "anon";

grant truncate on table "public"."time_capsules_moods" to "anon";

grant update on table "public"."time_capsules_moods" to "anon";

grant delete on table "public"."time_capsules_moods" to "authenticated";

grant insert on table "public"."time_capsules_moods" to "authenticated";

grant references on table "public"."time_capsules_moods" to "authenticated";

grant select on table "public"."time_capsules_moods" to "authenticated";

grant trigger on table "public"."time_capsules_moods" to "authenticated";

grant truncate on table "public"."time_capsules_moods" to "authenticated";

grant update on table "public"."time_capsules_moods" to "authenticated";

grant delete on table "public"."time_capsules_moods" to "service_role";

grant insert on table "public"."time_capsules_moods" to "service_role";

grant references on table "public"."time_capsules_moods" to "service_role";

grant select on table "public"."time_capsules_moods" to "service_role";

grant trigger on table "public"."time_capsules_moods" to "service_role";

grant truncate on table "public"."time_capsules_moods" to "service_role";

grant update on table "public"."time_capsules_moods" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."diary_entries"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."diary_entries"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for users based on user_id"
on "public"."diary_entries"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user_id"
on "public"."diary_entries"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for authenticated users only"
on "public"."diary_entries_moods"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."diary_entries_moods"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users only"
on "public"."diary_entries_moods"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."moods"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for users based on user_id"
on "public"."private_memory_vault"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."private_memory_vault"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for users based on user_id"
on "public"."private_memory_vault"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user_id"
on "public"."private_memory_vault"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."subscriptions"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for users based on user_id"
on "public"."subscriptions"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user_id"
on "public"."subscriptions"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on user_id"
on "public"."time_capsules"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."time_capsules"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for users based on user_id"
on "public"."time_capsules"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on email"
on "public"."time_capsules"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for authenticated users only"
on "public"."time_capsules_moods"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."time_capsules_moods"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users only"
on "public"."time_capsules_moods"
as permissive
for select
to authenticated
using (true);


CREATE TRIGGER check_mood_limit_for_normal_entry_trigger BEFORE INSERT ON public.diary_entries_moods FOR EACH ROW EXECUTE FUNCTION check_mood_limit_for_normal_entry();

CREATE TRIGGER check_mood_limit_for_time_capsule_trigger BEFORE INSERT ON public.time_capsules_moods FOR EACH ROW EXECUTE FUNCTION check_mood_limit_for_time_capsule();



