
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."lifetime" AS ENUM (
    'none',
    'basic',
    'premium',
    'elite'
);

ALTER TYPE "public"."lifetime" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."check_mood_limit"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  IF (SELECT COUNT(*) FROM diary_entries_moods WHERE diary_entry_id = NEW.diary_entry_id) >=5 THEN RAISE EXCEPTION 'A diary entry can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."check_mood_limit"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."check_mood_limit_for_normal_entry"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  IF (SELECT COUNT(*) FROM diary_entries_moods WHERE diary_entry_id = NEW.diary_entry_id) >=5 THEN RAISE EXCEPTION 'A diary entry can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."check_mood_limit_for_normal_entry"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."check_mood_limit_for_time_capsule"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  IF (SELECT COUNT(*) FROM time_capsules_moods WHERE time_capsule_id = NEW.time_capsule_id) >=5 THEN RAISE EXCEPTION 'A time capsule can have a maximum of 5 moods.';
  END IF;
  RETURN NEW;
END;$$;

ALTER FUNCTION "public"."check_mood_limit_for_time_capsule"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."diary_entries" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying,
    "content" "text",
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."diary_entries" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."diary_entries_moods" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "diary_entry_id" "uuid",
    "mood_id" bigint
);

ALTER TABLE "public"."diary_entries_moods" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."goals_for_tomorrow" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "goal" character varying DEFAULT ''::character varying NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."goals_for_tomorrow" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."moods" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."moods" OWNER TO "postgres";

ALTER TABLE "public"."moods" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."moods_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."private_memory_vault" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" character varying,
    "content" "text",
    "encrypted_key" "text",
    "user_id" "uuid"
);

ALTER TABLE "public"."private_memory_vault" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subscriptions" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "lifetime" "public"."lifetime" DEFAULT 'none'::"public"."lifetime" NOT NULL,
    "daily_entry_limit" smallint DEFAULT '0'::smallint NOT NULL,
    "vault_entry_limit" smallint DEFAULT '0'::smallint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "entries" integer DEFAULT 0 NOT NULL
);

ALTER TABLE "public"."subscriptions" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."time_capsules" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "unlock_date" timestamp with time zone,
    "title" character varying,
    "content" "text",
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."time_capsules" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."time_capsules_moods" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "time_capsule_id" "uuid",
    "mood_id" bigint
);

ALTER TABLE "public"."time_capsules_moods" OWNER TO "postgres";

ALTER TABLE ONLY "public"."diary_entries_moods"
    ADD CONSTRAINT "diary_entries_moods_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."diary_entries"
    ADD CONSTRAINT "diary_entries_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."goals_for_tomorrow"
    ADD CONSTRAINT "goals_for_tomorrow_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."moods"
    ADD CONSTRAINT "moods_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."moods"
    ADD CONSTRAINT "moods_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."private_memory_vault"
    ADD CONSTRAINT "private_memory_vault_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."time_capsules_moods"
    ADD CONSTRAINT "time_capsules_moods_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."time_capsules"
    ADD CONSTRAINT "time_capsules_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "check_mood_limit_for_normal_entry_trigger" BEFORE INSERT ON "public"."diary_entries_moods" FOR EACH ROW EXECUTE FUNCTION "public"."check_mood_limit_for_normal_entry"();

CREATE OR REPLACE TRIGGER "check_mood_limit_for_time_capsule_trigger" BEFORE INSERT ON "public"."time_capsules_moods" FOR EACH ROW EXECUTE FUNCTION "public"."check_mood_limit_for_time_capsule"();

ALTER TABLE ONLY "public"."diary_entries_moods"
    ADD CONSTRAINT "diary_entries_moods_diary_entry_id_fkey" FOREIGN KEY ("diary_entry_id") REFERENCES "public"."diary_entries"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."diary_entries_moods"
    ADD CONSTRAINT "diary_entries_moods_mood_id_fkey" FOREIGN KEY ("mood_id") REFERENCES "public"."moods"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."diary_entries"
    ADD CONSTRAINT "diary_entries_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."goals_for_tomorrow"
    ADD CONSTRAINT "goals_for_tomorrow_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."private_memory_vault"
    ADD CONSTRAINT "private_memory_vault_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."time_capsules_moods"
    ADD CONSTRAINT "time_capsules_moods_mood_id_fkey" FOREIGN KEY ("mood_id") REFERENCES "public"."moods"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."time_capsules_moods"
    ADD CONSTRAINT "time_capsules_moods_time_capsule_id_fkey" FOREIGN KEY ("time_capsule_id") REFERENCES "public"."time_capsules"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."time_capsules"
    ADD CONSTRAINT "time_capsules_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

CREATE POLICY "Enable delete for authenticated users only" ON "public"."diary_entries_moods" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON "public"."time_capsules_moods" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."diary_entries" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."goals_for_tomorrow" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."private_memory_vault" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."time_capsules" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."diary_entries_moods" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."time_capsules_moods" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."diary_entries" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."goals_for_tomorrow" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."private_memory_vault" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."subscriptions" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."time_capsules" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for all users" ON "public"."moods" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for authenticated users only" ON "public"."diary_entries_moods" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for authenticated users only" ON "public"."time_capsules_moods" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for users based on user_id" ON "public"."diary_entries" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for users based on user_id" ON "public"."goals_for_tomorrow" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for users based on user_id" ON "public"."private_memory_vault" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for users based on user_id" ON "public"."subscriptions" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for users based on user_id" ON "public"."time_capsules" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable update for users based on email" ON "public"."time_capsules" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."diary_entries" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."private_memory_vault" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."subscriptions" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

ALTER TABLE "public"."diary_entries" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."diary_entries_moods" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."goals_for_tomorrow" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."moods" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."private_memory_vault" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."subscriptions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."time_capsules" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."time_capsules_moods" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."diary_entries";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."diary_entries_moods";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."goals_for_tomorrow";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."moods";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."private_memory_vault";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."time_capsules";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."time_capsules_moods";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."check_mood_limit"() TO "anon";
GRANT ALL ON FUNCTION "public"."check_mood_limit"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_mood_limit"() TO "service_role";

GRANT ALL ON FUNCTION "public"."check_mood_limit_for_normal_entry"() TO "anon";
GRANT ALL ON FUNCTION "public"."check_mood_limit_for_normal_entry"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_mood_limit_for_normal_entry"() TO "service_role";

GRANT ALL ON FUNCTION "public"."check_mood_limit_for_time_capsule"() TO "anon";
GRANT ALL ON FUNCTION "public"."check_mood_limit_for_time_capsule"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_mood_limit_for_time_capsule"() TO "service_role";

GRANT ALL ON TABLE "public"."diary_entries" TO "anon";
GRANT ALL ON TABLE "public"."diary_entries" TO "authenticated";
GRANT ALL ON TABLE "public"."diary_entries" TO "service_role";

GRANT ALL ON TABLE "public"."diary_entries_moods" TO "anon";
GRANT ALL ON TABLE "public"."diary_entries_moods" TO "authenticated";
GRANT ALL ON TABLE "public"."diary_entries_moods" TO "service_role";

GRANT ALL ON TABLE "public"."goals_for_tomorrow" TO "anon";
GRANT ALL ON TABLE "public"."goals_for_tomorrow" TO "authenticated";
GRANT ALL ON TABLE "public"."goals_for_tomorrow" TO "service_role";

GRANT ALL ON TABLE "public"."moods" TO "anon";
GRANT ALL ON TABLE "public"."moods" TO "authenticated";
GRANT ALL ON TABLE "public"."moods" TO "service_role";

GRANT ALL ON SEQUENCE "public"."moods_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."moods_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."moods_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."private_memory_vault" TO "anon";
GRANT ALL ON TABLE "public"."private_memory_vault" TO "authenticated";
GRANT ALL ON TABLE "public"."private_memory_vault" TO "service_role";

GRANT ALL ON TABLE "public"."subscriptions" TO "anon";
GRANT ALL ON TABLE "public"."subscriptions" TO "authenticated";
GRANT ALL ON TABLE "public"."subscriptions" TO "service_role";

GRANT ALL ON TABLE "public"."time_capsules" TO "anon";
GRANT ALL ON TABLE "public"."time_capsules" TO "authenticated";
GRANT ALL ON TABLE "public"."time_capsules" TO "service_role";

GRANT ALL ON TABLE "public"."time_capsules_moods" TO "anon";
GRANT ALL ON TABLE "public"."time_capsules_moods" TO "authenticated";
GRANT ALL ON TABLE "public"."time_capsules_moods" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
