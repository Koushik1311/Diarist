drop policy "Enable insert for users based on user_id" on "public"."diary_entry";

drop policy "Enable update for users based on user_id" on "public"."diary_entry";

drop policy "User can see their own entry" on "public"."diary_entry";

revoke delete on table "public"."diary_entry" from "anon";

revoke insert on table "public"."diary_entry" from "anon";

revoke references on table "public"."diary_entry" from "anon";

revoke select on table "public"."diary_entry" from "anon";

revoke trigger on table "public"."diary_entry" from "anon";

revoke truncate on table "public"."diary_entry" from "anon";

revoke update on table "public"."diary_entry" from "anon";

revoke delete on table "public"."diary_entry" from "authenticated";

revoke insert on table "public"."diary_entry" from "authenticated";

revoke references on table "public"."diary_entry" from "authenticated";

revoke select on table "public"."diary_entry" from "authenticated";

revoke trigger on table "public"."diary_entry" from "authenticated";

revoke truncate on table "public"."diary_entry" from "authenticated";

revoke update on table "public"."diary_entry" from "authenticated";

revoke delete on table "public"."diary_entry" from "service_role";

revoke insert on table "public"."diary_entry" from "service_role";

revoke references on table "public"."diary_entry" from "service_role";

revoke select on table "public"."diary_entry" from "service_role";

revoke trigger on table "public"."diary_entry" from "service_role";

revoke truncate on table "public"."diary_entry" from "service_role";

revoke update on table "public"."diary_entry" from "service_role";

alter table "public"."diary_entry" drop constraint "diary_entry_user_id_fkey";

alter table "public"."diary_entry" drop constraint "diary_entry_pkey";

drop index if exists "public"."diary_entry_pkey";

drop table "public"."diary_entry";

create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."categories" enable row level security;

create table "public"."diary_entries" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "content" text,
    "user_id" uuid not null default gen_random_uuid(),
    "category_id" bigint
);


alter table "public"."diary_entries" enable row level security;

create table "public"."diary_entries_tags" (
    "id" bigint generated by default as identity not null,
    "diary_entry_id" bigint,
    "tag_id" bigint
);


alter table "public"."diary_entries_tags" enable row level security;

create table "public"."tags" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."tags" enable row level security;

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX diary_entries_tags_pkey ON public.diary_entries_tags USING btree (id);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

CREATE UNIQUE INDEX diary_entry_pkey ON public.diary_entries USING btree (id);

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."diary_entries" add constraint "diary_entry_pkey" PRIMARY KEY using index "diary_entry_pkey";

alter table "public"."diary_entries_tags" add constraint "diary_entries_tags_pkey" PRIMARY KEY using index "diary_entries_tags_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."diary_entries" add constraint "diary_entry_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries" validate constraint "diary_entry_user_id_fkey";

alter table "public"."diary_entries" add constraint "public_diary_entries_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) not valid;

alter table "public"."diary_entries" validate constraint "public_diary_entries_category_id_fkey";

alter table "public"."diary_entries_tags" add constraint "public_diary_entries_tags_diary_entry_id_fkey" FOREIGN KEY (diary_entry_id) REFERENCES diary_entries(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_tags" validate constraint "public_diary_entries_tags_diary_entry_id_fkey";

alter table "public"."diary_entries_tags" add constraint "public_diary_entries_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid;

alter table "public"."diary_entries_tags" validate constraint "public_diary_entries_tags_tag_id_fkey";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."diary_entries" to "anon";

grant insert on table "public"."diary_entries" to "anon";

grant references on table "public"."diary_entries" to "anon";

grant select on table "public"."diary_entries" to "anon";

grant trigger on table "public"."diary_entries" to "anon";

grant truncate on table "public"."diary_entries" to "anon";

grant update on table "public"."diary_entries" to "anon";

grant delete on table "public"."diary_entries" to "authenticated";

grant insert on table "public"."diary_entries" to "authenticated";

grant references on table "public"."diary_entries" to "authenticated";

grant select on table "public"."diary_entries" to "authenticated";

grant trigger on table "public"."diary_entries" to "authenticated";

grant truncate on table "public"."diary_entries" to "authenticated";

grant update on table "public"."diary_entries" to "authenticated";

grant delete on table "public"."diary_entries" to "service_role";

grant insert on table "public"."diary_entries" to "service_role";

grant references on table "public"."diary_entries" to "service_role";

grant select on table "public"."diary_entries" to "service_role";

grant trigger on table "public"."diary_entries" to "service_role";

grant truncate on table "public"."diary_entries" to "service_role";

grant update on table "public"."diary_entries" to "service_role";

grant delete on table "public"."diary_entries_tags" to "anon";

grant insert on table "public"."diary_entries_tags" to "anon";

grant references on table "public"."diary_entries_tags" to "anon";

grant select on table "public"."diary_entries_tags" to "anon";

grant trigger on table "public"."diary_entries_tags" to "anon";

grant truncate on table "public"."diary_entries_tags" to "anon";

grant update on table "public"."diary_entries_tags" to "anon";

grant delete on table "public"."diary_entries_tags" to "authenticated";

grant insert on table "public"."diary_entries_tags" to "authenticated";

grant references on table "public"."diary_entries_tags" to "authenticated";

grant select on table "public"."diary_entries_tags" to "authenticated";

grant trigger on table "public"."diary_entries_tags" to "authenticated";

grant truncate on table "public"."diary_entries_tags" to "authenticated";

grant update on table "public"."diary_entries_tags" to "authenticated";

grant delete on table "public"."diary_entries_tags" to "service_role";

grant insert on table "public"."diary_entries_tags" to "service_role";

grant references on table "public"."diary_entries_tags" to "service_role";

grant select on table "public"."diary_entries_tags" to "service_role";

grant trigger on table "public"."diary_entries_tags" to "service_role";

grant truncate on table "public"."diary_entries_tags" to "service_role";

grant update on table "public"."diary_entries_tags" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."diary_entries"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user_id"
on "public"."diary_entries"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "User can see their own entry"
on "public"."diary_entries"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));




